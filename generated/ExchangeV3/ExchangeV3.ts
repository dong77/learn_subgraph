// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BlockSubmitted extends ethereum.Event {
  get params(): BlockSubmitted__Params {
    return new BlockSubmitted__Params(this);
  }
}

export class BlockSubmitted__Params {
  _event: BlockSubmitted;

  constructor(event: BlockSubmitted) {
    this._event = event;
  }

  get blockIdx(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get merkleRoot(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get publicDataHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class DepositRequested extends ethereum.Event {
  get params(): DepositRequested__Params {
    return new DepositRequested__Params(this);
  }
}

export class DepositRequested__Params {
  _event: DepositRequested;

  constructor(event: DepositRequested) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ExchangeCloned extends ethereum.Event {
  get params(): ExchangeCloned__Params {
    return new ExchangeCloned__Params(this);
  }
}

export class ExchangeCloned__Params {
  _event: ExchangeCloned;

  constructor(event: ExchangeCloned) {
    this._event = event;
  }

  get exchangeAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get genesisMerkleRoot(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class ForcedWithdrawalRequested extends ethereum.Event {
  get params(): ForcedWithdrawalRequested__Params {
    return new ForcedWithdrawalRequested__Params(this);
  }
}

export class ForcedWithdrawalRequested__Params {
  _event: ForcedWithdrawalRequested;

  constructor(event: ForcedWithdrawalRequested) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get accountID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProtocolFeesUpdated extends ethereum.Event {
  get params(): ProtocolFeesUpdated__Params {
    return new ProtocolFeesUpdated__Params(this);
  }
}

export class ProtocolFeesUpdated__Params {
  _event: ProtocolFeesUpdated;

  constructor(event: ProtocolFeesUpdated) {
    this._event = event;
  }

  get takerFeeBips(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get makerFeeBips(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get previousTakerFeeBips(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get previousMakerFeeBips(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class Shutdown extends ethereum.Event {
  get params(): Shutdown__Params {
    return new Shutdown__Params(this);
  }
}

export class Shutdown__Params {
  _event: Shutdown;

  constructor(event: Shutdown) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TokenRegistered extends ethereum.Event {
  get params(): TokenRegistered__Params {
    return new TokenRegistered__Params(this);
  }
}

export class TokenRegistered__Params {
  _event: TokenRegistered;

  constructor(event: TokenRegistered) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class TransactionApproved extends ethereum.Event {
  get params(): TransactionApproved__Params {
    return new TransactionApproved__Params(this);
  }
}

export class TransactionApproved__Params {
  _event: TransactionApproved;

  constructor(event: TransactionApproved) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get transactionHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class WithdrawalCompleted extends ethereum.Event {
  get params(): WithdrawalCompleted__Params {
    return new WithdrawalCompleted__Params(this);
  }
}

export class WithdrawalCompleted__Params {
  _event: WithdrawalCompleted;

  constructor(event: WithdrawalCompleted) {
    this._event = event;
  }

  get category(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class WithdrawalFailed extends ethereum.Event {
  get params(): WithdrawalFailed__Params {
    return new WithdrawalFailed__Params(this);
  }
}

export class WithdrawalFailed__Params {
  _event: WithdrawalFailed;

  constructor(event: WithdrawalFailed) {
    this._event = event;
  }

  get category(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class WithdrawalModeActivated extends ethereum.Event {
  get params(): WithdrawalModeActivated__Params {
    return new WithdrawalModeActivated__Params(this);
  }
}

export class WithdrawalModeActivated__Params {
  _event: WithdrawalModeActivated;

  constructor(event: WithdrawalModeActivated) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ExchangeV3__stateResultProtocolFeeDataStruct extends ethereum.Tuple {
  get syncedAt(): BigInt {
    return this[0].toBigInt();
  }

  get takerFeeBips(): i32 {
    return this[1].toI32();
  }

  get makerFeeBips(): i32 {
    return this[2].toI32();
  }

  get previousTakerFeeBips(): i32 {
    return this[3].toI32();
  }

  get previousMakerFeeBips(): i32 {
    return this[4].toI32();
  }
}

export class ExchangeV3__stateResult {
  value0: BigInt;
  value1: Bytes;
  value2: Address;
  value3: Address;
  value4: Address;
  value5: Address;
  value6: Bytes;
  value7: BigInt;
  value8: BigInt;
  value9: ExchangeV3__stateResultProtocolFeeDataStruct;
  value10: BigInt;
  value11: BigInt;

  constructor(
    value0: BigInt,
    value1: Bytes,
    value2: Address,
    value3: Address,
    value4: Address,
    value5: Address,
    value6: Bytes,
    value7: BigInt,
    value8: BigInt,
    value9: ExchangeV3__stateResultProtocolFeeDataStruct,
    value10: BigInt,
    value11: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromFixedBytes(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromTuple(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    return map;
  }
}

export class ExchangeV3__getConstantsResultValue0Struct extends ethereum.Tuple {
  get SNARK_SCALAR_FIELD(): BigInt {
    return this[0].toBigInt();
  }

  get MAX_OPEN_FORCED_REQUESTS(): BigInt {
    return this[1].toBigInt();
  }

  get MAX_AGE_FORCED_REQUEST_UNTIL_WITHDRAW_MODE(): BigInt {
    return this[2].toBigInt();
  }

  get TIMESTAMP_HALF_WINDOW_SIZE_IN_SECONDS(): BigInt {
    return this[3].toBigInt();
  }

  get MAX_NUM_ACCOUNTS(): BigInt {
    return this[4].toBigInt();
  }

  get MAX_NUM_TOKENS(): BigInt {
    return this[5].toBigInt();
  }

  get MIN_AGE_PROTOCOL_FEES_UNTIL_UPDATED(): BigInt {
    return this[6].toBigInt();
  }

  get MIN_TIME_IN_SHUTDOWN(): BigInt {
    return this[7].toBigInt();
  }

  get TX_DATA_AVAILABILITY_SIZE(): BigInt {
    return this[8].toBigInt();
  }

  get MAX_AGE_DEPOSIT_UNTIL_WITHDRAWABLE_UPPERBOUND(): BigInt {
    return this[9].toBigInt();
  }
}

export class ExchangeV3__getBlockInfoResultValue0Struct extends ethereum.Tuple {
  get timestamp(): BigInt {
    return this[0].toBigInt();
  }

  get blockDataHash(): Bytes {
    return this[1].toBytes();
  }
}

export class ExchangeV3__getProtocolFeeValuesResult {
  value0: BigInt;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: i32;

  constructor(
    value0: BigInt,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    return map;
  }
}

export class ExchangeV3 extends ethereum.SmartContract {
  static bind(address: Address): ExchangeV3 {
    return new ExchangeV3("ExchangeV3", address);
  }

  loopringAddr(): Address {
    let result = super.call("loopringAddr", "loopringAddr():(address)", []);

    return result[0].toAddress();
  }

  try_loopringAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("loopringAddr", "loopringAddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  state(): ExchangeV3__stateResult {
    let result = super.call(
      "state",
      "state():(uint32,bytes32,address,address,address,address,bytes32,uint256,uint32,(uint32,uint8,uint8,uint8,uint8),uint256,uint256)",
      []
    );

    return new ExchangeV3__stateResult(
      result[0].toBigInt(),
      result[1].toBytes(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toAddress(),
      result[6].toBytes(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toTuple() as ExchangeV3__stateResultProtocolFeeDataStruct,
      result[10].toBigInt(),
      result[11].toBigInt()
    );
  }

  try_state(): ethereum.CallResult<ExchangeV3__stateResult> {
    let result = super.tryCall(
      "state",
      "state():(uint32,bytes32,address,address,address,address,bytes32,uint256,uint32,(uint32,uint8,uint8,uint8,uint8),uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ExchangeV3__stateResult(
        value[0].toBigInt(),
        value[1].toBytes(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toAddress(),
        value[6].toBytes(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toTuple() as ExchangeV3__stateResultProtocolFeeDataStruct,
        value[10].toBigInt(),
        value[11].toBigInt()
      )
    );
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  domainSeparator(): Bytes {
    let result = super.call(
      "domainSeparator",
      "domainSeparator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_domainSeparator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "domainSeparator",
      "domainSeparator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAgentRegistry(): Address {
    let result = super.call(
      "getAgentRegistry",
      "getAgentRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getAgentRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAgentRegistry",
      "getAgentRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDepositContract(): Address {
    let result = super.call(
      "getDepositContract",
      "getDepositContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getDepositContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDepositContract",
      "getDepositContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isUserOrAgent(owner: Address): boolean {
    let result = super.call("isUserOrAgent", "isUserOrAgent(address):(bool)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBoolean();
  }

  try_isUserOrAgent(owner: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isUserOrAgent",
      "isUserOrAgent(address):(bool)",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getConstants(): ExchangeV3__getConstantsResultValue0Struct {
    let result = super.call(
      "getConstants",
      "getConstants():((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      []
    );

    return result[0].toTuple() as ExchangeV3__getConstantsResultValue0Struct;
  }

  try_getConstants(): ethereum.CallResult<
    ExchangeV3__getConstantsResultValue0Struct
  > {
    let result = super.tryCall(
      "getConstants",
      "getConstants():((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as ExchangeV3__getConstantsResultValue0Struct
    );
  }

  isInWithdrawalMode(): boolean {
    let result = super.call(
      "isInWithdrawalMode",
      "isInWithdrawalMode():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isInWithdrawalMode(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isInWithdrawalMode",
      "isInWithdrawalMode():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isShutdown(): boolean {
    let result = super.call("isShutdown", "isShutdown():(bool)", []);

    return result[0].toBoolean();
  }

  try_isShutdown(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isShutdown", "isShutdown():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  registerToken(tokenAddress: Address): i32 {
    let result = super.call(
      "registerToken",
      "registerToken(address):(uint16)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toI32();
  }

  try_registerToken(tokenAddress: Address): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "registerToken",
      "registerToken(address):(uint16)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getTokenID(tokenAddress: Address): i32 {
    let result = super.call("getTokenID", "getTokenID(address):(uint16)", [
      ethereum.Value.fromAddress(tokenAddress)
    ]);

    return result[0].toI32();
  }

  try_getTokenID(tokenAddress: Address): ethereum.CallResult<i32> {
    let result = super.tryCall("getTokenID", "getTokenID(address):(uint16)", [
      ethereum.Value.fromAddress(tokenAddress)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getTokenAddress(tokenID: i32): Address {
    let result = super.call(
      "getTokenAddress",
      "getTokenAddress(uint16):(address)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenID))]
    );

    return result[0].toAddress();
  }

  try_getTokenAddress(tokenID: i32): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTokenAddress",
      "getTokenAddress(uint16):(address)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenID))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getExchangeStake(): BigInt {
    let result = super.call(
      "getExchangeStake",
      "getExchangeStake():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getExchangeStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExchangeStake",
      "getExchangeStake():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawExchangeStake(recipient: Address): BigInt {
    let result = super.call(
      "withdrawExchangeStake",
      "withdrawExchangeStake(address):(uint256)",
      [ethereum.Value.fromAddress(recipient)]
    );

    return result[0].toBigInt();
  }

  try_withdrawExchangeStake(recipient: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawExchangeStake",
      "withdrawExchangeStake(address):(uint256)",
      [ethereum.Value.fromAddress(recipient)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProtocolFeeLastWithdrawnTime(tokenAddress: Address): BigInt {
    let result = super.call(
      "getProtocolFeeLastWithdrawnTime",
      "getProtocolFeeLastWithdrawnTime(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBigInt();
  }

  try_getProtocolFeeLastWithdrawnTime(
    tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProtocolFeeLastWithdrawnTime",
      "getProtocolFeeLastWithdrawnTime(address):(uint256)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMerkleRoot(): Bytes {
    let result = super.call("getMerkleRoot", "getMerkleRoot():(bytes32)", []);

    return result[0].toBytes();
  }

  try_getMerkleRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getMerkleRoot",
      "getMerkleRoot():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getBlockHeight(): BigInt {
    let result = super.call("getBlockHeight", "getBlockHeight():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBlockHeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBlockHeight",
      "getBlockHeight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBlockInfo(blockIdx: BigInt): ExchangeV3__getBlockInfoResultValue0Struct {
    let result = super.call(
      "getBlockInfo",
      "getBlockInfo(uint256):((uint32,bytes28))",
      [ethereum.Value.fromUnsignedBigInt(blockIdx)]
    );

    return result[0].toTuple() as ExchangeV3__getBlockInfoResultValue0Struct;
  }

  try_getBlockInfo(
    blockIdx: BigInt
  ): ethereum.CallResult<ExchangeV3__getBlockInfoResultValue0Struct> {
    let result = super.tryCall(
      "getBlockInfo",
      "getBlockInfo(uint256):((uint32,bytes28))",
      [ethereum.Value.fromUnsignedBigInt(blockIdx)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as ExchangeV3__getBlockInfoResultValue0Struct
    );
  }

  getNumAvailableForcedSlots(): BigInt {
    let result = super.call(
      "getNumAvailableForcedSlots",
      "getNumAvailableForcedSlots():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNumAvailableForcedSlots(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumAvailableForcedSlots",
      "getNumAvailableForcedSlots():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPendingDepositAmount(owner: Address, tokenAddress: Address): BigInt {
    let result = super.call(
      "getPendingDepositAmount",
      "getPendingDepositAmount(address,address):(uint96)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(tokenAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPendingDepositAmount(
    owner: Address,
    tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPendingDepositAmount",
      "getPendingDepositAmount(address,address):(uint96)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(tokenAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isForcedWithdrawalPending(accountID: BigInt, token: Address): boolean {
    let result = super.call(
      "isForcedWithdrawalPending",
      "isForcedWithdrawalPending(uint32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(accountID),
        ethereum.Value.fromAddress(token)
      ]
    );

    return result[0].toBoolean();
  }

  try_isForcedWithdrawalPending(
    accountID: BigInt,
    token: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isForcedWithdrawalPending",
      "isForcedWithdrawalPending(uint32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(accountID),
        ethereum.Value.fromAddress(token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWithdrawnInWithdrawalMode(accountID: BigInt, token: Address): boolean {
    let result = super.call(
      "isWithdrawnInWithdrawalMode",
      "isWithdrawnInWithdrawalMode(uint32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(accountID),
        ethereum.Value.fromAddress(token)
      ]
    );

    return result[0].toBoolean();
  }

  try_isWithdrawnInWithdrawalMode(
    accountID: BigInt,
    token: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWithdrawnInWithdrawalMode",
      "isWithdrawnInWithdrawalMode(uint32,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(accountID),
        ethereum.Value.fromAddress(token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAmountWithdrawable(owner: Address, token: Address): BigInt {
    let result = super.call(
      "getAmountWithdrawable",
      "getAmountWithdrawable(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getAmountWithdrawable(
    owner: Address,
    token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAmountWithdrawable",
      "getAmountWithdrawable(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWithdrawalRecipient(
    from: Address,
    to: Address,
    token: Address,
    amount: BigInt,
    storageID: BigInt
  ): Address {
    let result = super.call(
      "getWithdrawalRecipient",
      "getWithdrawalRecipient(address,address,address,uint96,uint32):(address)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(storageID)
      ]
    );

    return result[0].toAddress();
  }

  try_getWithdrawalRecipient(
    from: Address,
    to: Address,
    token: Address,
    amount: BigInt,
    storageID: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getWithdrawalRecipient",
      "getWithdrawalRecipient(address,address,address,uint96,uint32):(address)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(storageID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isTransactionApproved(owner: Address, transactionHash: Bytes): boolean {
    let result = super.call(
      "isTransactionApproved",
      "isTransactionApproved(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromFixedBytes(transactionHash)
      ]
    );

    return result[0].toBoolean();
  }

  try_isTransactionApproved(
    owner: Address,
    transactionHash: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTransactionApproved",
      "isTransactionApproved(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromFixedBytes(transactionHash)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getDomainSeparator(): Bytes {
    let result = super.call(
      "getDomainSeparator",
      "getDomainSeparator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getDomainSeparator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getDomainSeparator",
      "getDomainSeparator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  setMaxAgeDepositUntilWithdrawable(newValue: BigInt): BigInt {
    let result = super.call(
      "setMaxAgeDepositUntilWithdrawable",
      "setMaxAgeDepositUntilWithdrawable(uint32):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(newValue)]
    );

    return result[0].toBigInt();
  }

  try_setMaxAgeDepositUntilWithdrawable(
    newValue: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "setMaxAgeDepositUntilWithdrawable",
      "setMaxAgeDepositUntilWithdrawable(uint32):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(newValue)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaxAgeDepositUntilWithdrawable(): BigInt {
    let result = super.call(
      "getMaxAgeDepositUntilWithdrawable",
      "getMaxAgeDepositUntilWithdrawable():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMaxAgeDepositUntilWithdrawable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxAgeDepositUntilWithdrawable",
      "getMaxAgeDepositUntilWithdrawable():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shutdown(): boolean {
    let result = super.call("shutdown", "shutdown():(bool)", []);

    return result[0].toBoolean();
  }

  try_shutdown(): ethereum.CallResult<boolean> {
    let result = super.tryCall("shutdown", "shutdown():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getProtocolFeeValues(): ExchangeV3__getProtocolFeeValuesResult {
    let result = super.call(
      "getProtocolFeeValues",
      "getProtocolFeeValues():(uint32,uint8,uint8,uint8,uint8)",
      []
    );

    return new ExchangeV3__getProtocolFeeValuesResult(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32()
    );
  }

  try_getProtocolFeeValues(): ethereum.CallResult<
    ExchangeV3__getProtocolFeeValuesResult
  > {
    let result = super.tryCall(
      "getProtocolFeeValues",
      "getProtocolFeeValues():(uint32,uint8,uint8,uint8,uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ExchangeV3__getProtocolFeeValuesResult(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _loopring(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _genesisMerkleRoot(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SetAgentRegistryCall extends ethereum.Call {
  get inputs(): SetAgentRegistryCall__Inputs {
    return new SetAgentRegistryCall__Inputs(this);
  }

  get outputs(): SetAgentRegistryCall__Outputs {
    return new SetAgentRegistryCall__Outputs(this);
  }
}

export class SetAgentRegistryCall__Inputs {
  _call: SetAgentRegistryCall;

  constructor(call: SetAgentRegistryCall) {
    this._call = call;
  }

  get _agentRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAgentRegistryCall__Outputs {
  _call: SetAgentRegistryCall;

  constructor(call: SetAgentRegistryCall) {
    this._call = call;
  }
}

export class RefreshBlockVerifierCall extends ethereum.Call {
  get inputs(): RefreshBlockVerifierCall__Inputs {
    return new RefreshBlockVerifierCall__Inputs(this);
  }

  get outputs(): RefreshBlockVerifierCall__Outputs {
    return new RefreshBlockVerifierCall__Outputs(this);
  }
}

export class RefreshBlockVerifierCall__Inputs {
  _call: RefreshBlockVerifierCall;

  constructor(call: RefreshBlockVerifierCall) {
    this._call = call;
  }
}

export class RefreshBlockVerifierCall__Outputs {
  _call: RefreshBlockVerifierCall;

  constructor(call: RefreshBlockVerifierCall) {
    this._call = call;
  }
}

export class SetDepositContractCall extends ethereum.Call {
  get inputs(): SetDepositContractCall__Inputs {
    return new SetDepositContractCall__Inputs(this);
  }

  get outputs(): SetDepositContractCall__Outputs {
    return new SetDepositContractCall__Outputs(this);
  }
}

export class SetDepositContractCall__Inputs {
  _call: SetDepositContractCall;

  constructor(call: SetDepositContractCall) {
    this._call = call;
  }

  get _depositContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDepositContractCall__Outputs {
  _call: SetDepositContractCall;

  constructor(call: SetDepositContractCall) {
    this._call = call;
  }
}

export class WithdrawExchangeFeesCall extends ethereum.Call {
  get inputs(): WithdrawExchangeFeesCall__Inputs {
    return new WithdrawExchangeFeesCall__Inputs(this);
  }

  get outputs(): WithdrawExchangeFeesCall__Outputs {
    return new WithdrawExchangeFeesCall__Outputs(this);
  }
}

export class WithdrawExchangeFeesCall__Inputs {
  _call: WithdrawExchangeFeesCall;

  constructor(call: WithdrawExchangeFeesCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawExchangeFeesCall__Outputs {
  _call: WithdrawExchangeFeesCall;

  constructor(call: WithdrawExchangeFeesCall) {
    this._call = call;
  }
}

export class RegisterTokenCall extends ethereum.Call {
  get inputs(): RegisterTokenCall__Inputs {
    return new RegisterTokenCall__Inputs(this);
  }

  get outputs(): RegisterTokenCall__Outputs {
    return new RegisterTokenCall__Outputs(this);
  }
}

export class RegisterTokenCall__Inputs {
  _call: RegisterTokenCall;

  constructor(call: RegisterTokenCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterTokenCall__Outputs {
  _call: RegisterTokenCall;

  constructor(call: RegisterTokenCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class WithdrawExchangeStakeCall extends ethereum.Call {
  get inputs(): WithdrawExchangeStakeCall__Inputs {
    return new WithdrawExchangeStakeCall__Inputs(this);
  }

  get outputs(): WithdrawExchangeStakeCall__Outputs {
    return new WithdrawExchangeStakeCall__Outputs(this);
  }
}

export class WithdrawExchangeStakeCall__Inputs {
  _call: WithdrawExchangeStakeCall;

  constructor(call: WithdrawExchangeStakeCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawExchangeStakeCall__Outputs {
  _call: WithdrawExchangeStakeCall;

  constructor(call: WithdrawExchangeStakeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BurnExchangeStakeCall extends ethereum.Call {
  get inputs(): BurnExchangeStakeCall__Inputs {
    return new BurnExchangeStakeCall__Inputs(this);
  }

  get outputs(): BurnExchangeStakeCall__Outputs {
    return new BurnExchangeStakeCall__Outputs(this);
  }
}

export class BurnExchangeStakeCall__Inputs {
  _call: BurnExchangeStakeCall;

  constructor(call: BurnExchangeStakeCall) {
    this._call = call;
  }
}

export class BurnExchangeStakeCall__Outputs {
  _call: BurnExchangeStakeCall;

  constructor(call: BurnExchangeStakeCall) {
    this._call = call;
  }
}

export class SubmitBlocksCall extends ethereum.Call {
  get inputs(): SubmitBlocksCall__Inputs {
    return new SubmitBlocksCall__Inputs(this);
  }

  get outputs(): SubmitBlocksCall__Outputs {
    return new SubmitBlocksCall__Outputs(this);
  }
}

export class SubmitBlocksCall__Inputs {
  _call: SubmitBlocksCall;

  constructor(call: SubmitBlocksCall) {
    this._call = call;
  }

  get blocks(): Array<SubmitBlocksCallBlocksStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      SubmitBlocksCallBlocksStruct
    >();
  }
}

export class SubmitBlocksCall__Outputs {
  _call: SubmitBlocksCall;

  constructor(call: SubmitBlocksCall) {
    this._call = call;
  }
}

export class SubmitBlocksCallBlocksStruct extends ethereum.Tuple {
  get blockType(): i32 {
    return this[0].toI32();
  }

  get blockSize(): i32 {
    return this[1].toI32();
  }

  get blockVersion(): i32 {
    return this[2].toI32();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }

  get proof(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get storeBlockInfoOnchain(): boolean {
    return this[5].toBoolean();
  }

  get auxiliaryData(): Array<SubmitBlocksCallBlocksAuxiliaryDataStruct> {
    return this[6].toTupleArray<SubmitBlocksCallBlocksAuxiliaryDataStruct>();
  }

  get offchainData(): Bytes {
    return this[7].toBytes();
  }
}

export class SubmitBlocksCallBlocksAuxiliaryDataStruct extends ethereum.Tuple {
  get txIndex(): BigInt {
    return this[0].toBigInt();
  }

  get approved(): boolean {
    return this[1].toBoolean();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get extraData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class ForceWithdrawCall extends ethereum.Call {
  get inputs(): ForceWithdrawCall__Inputs {
    return new ForceWithdrawCall__Inputs(this);
  }

  get outputs(): ForceWithdrawCall__Outputs {
    return new ForceWithdrawCall__Outputs(this);
  }
}

export class ForceWithdrawCall__Inputs {
  _call: ForceWithdrawCall;

  constructor(call: ForceWithdrawCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get accountID(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ForceWithdrawCall__Outputs {
  _call: ForceWithdrawCall;

  constructor(call: ForceWithdrawCall) {
    this._call = call;
  }
}

export class WithdrawProtocolFeesCall extends ethereum.Call {
  get inputs(): WithdrawProtocolFeesCall__Inputs {
    return new WithdrawProtocolFeesCall__Inputs(this);
  }

  get outputs(): WithdrawProtocolFeesCall__Outputs {
    return new WithdrawProtocolFeesCall__Outputs(this);
  }
}

export class WithdrawProtocolFeesCall__Inputs {
  _call: WithdrawProtocolFeesCall;

  constructor(call: WithdrawProtocolFeesCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawProtocolFeesCall__Outputs {
  _call: WithdrawProtocolFeesCall;

  constructor(call: WithdrawProtocolFeesCall) {
    this._call = call;
  }
}

export class WithdrawFromMerkleTreeCall extends ethereum.Call {
  get inputs(): WithdrawFromMerkleTreeCall__Inputs {
    return new WithdrawFromMerkleTreeCall__Inputs(this);
  }

  get outputs(): WithdrawFromMerkleTreeCall__Outputs {
    return new WithdrawFromMerkleTreeCall__Outputs(this);
  }
}

export class WithdrawFromMerkleTreeCall__Inputs {
  _call: WithdrawFromMerkleTreeCall;

  constructor(call: WithdrawFromMerkleTreeCall) {
    this._call = call;
  }

  get merkleProof(): WithdrawFromMerkleTreeCallMerkleProofStruct {
    return this._call.inputValues[0].value.toTuple() as WithdrawFromMerkleTreeCallMerkleProofStruct;
  }
}

export class WithdrawFromMerkleTreeCall__Outputs {
  _call: WithdrawFromMerkleTreeCall;

  constructor(call: WithdrawFromMerkleTreeCall) {
    this._call = call;
  }
}

export class WithdrawFromMerkleTreeCallMerkleProofStruct extends ethereum.Tuple {
  get accountLeaf(): WithdrawFromMerkleTreeCallMerkleProofAccountLeafStruct {
    return this[0].toTuple() as WithdrawFromMerkleTreeCallMerkleProofAccountLeafStruct;
  }

  get balanceLeaf(): WithdrawFromMerkleTreeCallMerkleProofBalanceLeafStruct {
    return this[1].toTuple() as WithdrawFromMerkleTreeCallMerkleProofBalanceLeafStruct;
  }

  get accountMerkleProof(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get balanceMerkleProof(): Array<BigInt> {
    return this[3].toBigIntArray();
  }
}

export class WithdrawFromMerkleTreeCallMerkleProofAccountLeafStruct extends ethereum.Tuple {
  get accountID(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get pubKeyX(): BigInt {
    return this[2].toBigInt();
  }

  get pubKeyY(): BigInt {
    return this[3].toBigInt();
  }

  get nonce(): BigInt {
    return this[4].toBigInt();
  }

  get feeBipsAMM(): BigInt {
    return this[5].toBigInt();
  }
}

export class WithdrawFromMerkleTreeCallMerkleProofBalanceLeafStruct extends ethereum.Tuple {
  get tokenID(): i32 {
    return this[0].toI32();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }

  get weightAMM(): BigInt {
    return this[2].toBigInt();
  }

  get storageRoot(): BigInt {
    return this[3].toBigInt();
  }
}

export class WithdrawFromDepositRequestCall extends ethereum.Call {
  get inputs(): WithdrawFromDepositRequestCall__Inputs {
    return new WithdrawFromDepositRequestCall__Inputs(this);
  }

  get outputs(): WithdrawFromDepositRequestCall__Outputs {
    return new WithdrawFromDepositRequestCall__Outputs(this);
  }
}

export class WithdrawFromDepositRequestCall__Inputs {
  _call: WithdrawFromDepositRequestCall;

  constructor(call: WithdrawFromDepositRequestCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawFromDepositRequestCall__Outputs {
  _call: WithdrawFromDepositRequestCall;

  constructor(call: WithdrawFromDepositRequestCall) {
    this._call = call;
  }
}

export class WithdrawFromApprovedWithdrawalsCall extends ethereum.Call {
  get inputs(): WithdrawFromApprovedWithdrawalsCall__Inputs {
    return new WithdrawFromApprovedWithdrawalsCall__Inputs(this);
  }

  get outputs(): WithdrawFromApprovedWithdrawalsCall__Outputs {
    return new WithdrawFromApprovedWithdrawalsCall__Outputs(this);
  }
}

export class WithdrawFromApprovedWithdrawalsCall__Inputs {
  _call: WithdrawFromApprovedWithdrawalsCall;

  constructor(call: WithdrawFromApprovedWithdrawalsCall) {
    this._call = call;
  }

  get owners(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class WithdrawFromApprovedWithdrawalsCall__Outputs {
  _call: WithdrawFromApprovedWithdrawalsCall;

  constructor(call: WithdrawFromApprovedWithdrawalsCall) {
    this._call = call;
  }
}

export class NotifyForcedRequestTooOldCall extends ethereum.Call {
  get inputs(): NotifyForcedRequestTooOldCall__Inputs {
    return new NotifyForcedRequestTooOldCall__Inputs(this);
  }

  get outputs(): NotifyForcedRequestTooOldCall__Outputs {
    return new NotifyForcedRequestTooOldCall__Outputs(this);
  }
}

export class NotifyForcedRequestTooOldCall__Inputs {
  _call: NotifyForcedRequestTooOldCall;

  constructor(call: NotifyForcedRequestTooOldCall) {
    this._call = call;
  }

  get accountID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class NotifyForcedRequestTooOldCall__Outputs {
  _call: NotifyForcedRequestTooOldCall;

  constructor(call: NotifyForcedRequestTooOldCall) {
    this._call = call;
  }
}

export class SetWithdrawalRecipientCall extends ethereum.Call {
  get inputs(): SetWithdrawalRecipientCall__Inputs {
    return new SetWithdrawalRecipientCall__Inputs(this);
  }

  get outputs(): SetWithdrawalRecipientCall__Outputs {
    return new SetWithdrawalRecipientCall__Outputs(this);
  }
}

export class SetWithdrawalRecipientCall__Inputs {
  _call: SetWithdrawalRecipientCall;

  constructor(call: SetWithdrawalRecipientCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get storageID(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get newRecipient(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class SetWithdrawalRecipientCall__Outputs {
  _call: SetWithdrawalRecipientCall;

  constructor(call: SetWithdrawalRecipientCall) {
    this._call = call;
  }
}

export class OnchainTransferFromCall extends ethereum.Call {
  get inputs(): OnchainTransferFromCall__Inputs {
    return new OnchainTransferFromCall__Inputs(this);
  }

  get outputs(): OnchainTransferFromCall__Outputs {
    return new OnchainTransferFromCall__Outputs(this);
  }
}

export class OnchainTransferFromCall__Inputs {
  _call: OnchainTransferFromCall;

  constructor(call: OnchainTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class OnchainTransferFromCall__Outputs {
  _call: OnchainTransferFromCall;

  constructor(call: OnchainTransferFromCall) {
    this._call = call;
  }
}

export class ApproveTransactionCall extends ethereum.Call {
  get inputs(): ApproveTransactionCall__Inputs {
    return new ApproveTransactionCall__Inputs(this);
  }

  get outputs(): ApproveTransactionCall__Outputs {
    return new ApproveTransactionCall__Outputs(this);
  }
}

export class ApproveTransactionCall__Inputs {
  _call: ApproveTransactionCall;

  constructor(call: ApproveTransactionCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get transactionHash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ApproveTransactionCall__Outputs {
  _call: ApproveTransactionCall;

  constructor(call: ApproveTransactionCall) {
    this._call = call;
  }
}

export class ApproveTransactionsCall extends ethereum.Call {
  get inputs(): ApproveTransactionsCall__Inputs {
    return new ApproveTransactionsCall__Inputs(this);
  }

  get outputs(): ApproveTransactionsCall__Outputs {
    return new ApproveTransactionsCall__Outputs(this);
  }
}

export class ApproveTransactionsCall__Inputs {
  _call: ApproveTransactionsCall;

  constructor(call: ApproveTransactionsCall) {
    this._call = call;
  }

  get owners(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get transactionHashes(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class ApproveTransactionsCall__Outputs {
  _call: ApproveTransactionsCall;

  constructor(call: ApproveTransactionsCall) {
    this._call = call;
  }
}

export class SetMaxAgeDepositUntilWithdrawableCall extends ethereum.Call {
  get inputs(): SetMaxAgeDepositUntilWithdrawableCall__Inputs {
    return new SetMaxAgeDepositUntilWithdrawableCall__Inputs(this);
  }

  get outputs(): SetMaxAgeDepositUntilWithdrawableCall__Outputs {
    return new SetMaxAgeDepositUntilWithdrawableCall__Outputs(this);
  }
}

export class SetMaxAgeDepositUntilWithdrawableCall__Inputs {
  _call: SetMaxAgeDepositUntilWithdrawableCall;

  constructor(call: SetMaxAgeDepositUntilWithdrawableCall) {
    this._call = call;
  }

  get newValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxAgeDepositUntilWithdrawableCall__Outputs {
  _call: SetMaxAgeDepositUntilWithdrawableCall;

  constructor(call: SetMaxAgeDepositUntilWithdrawableCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ShutdownCall extends ethereum.Call {
  get inputs(): ShutdownCall__Inputs {
    return new ShutdownCall__Inputs(this);
  }

  get outputs(): ShutdownCall__Outputs {
    return new ShutdownCall__Outputs(this);
  }
}

export class ShutdownCall__Inputs {
  _call: ShutdownCall;

  constructor(call: ShutdownCall) {
    this._call = call;
  }
}

export class ShutdownCall__Outputs {
  _call: ShutdownCall;

  constructor(call: ShutdownCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
